<!--
***********************************************************************************************
NuGet.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Load NuGet.Build.Tasks.dll, this can be overridden to use a different version with $(RestoreTaskAssemblyFile) -->
  <PropertyGroup>
    <NugetTaskAssemblyFile Condition="$(NugetTaskAssemblyFile) == ''">D:\nuget\NuGet.Client\src\NuGet.Core\NuGet.Build.Tasks\bin\debug\net45\NuGet.Build.Tasks.dll</NugetTaskAssemblyFile>
  </PropertyGroup>
  <UsingTask TaskName="NuGet.Build.Tasks.PackTask" AssemblyFile="$(NugetTaskAssemblyFile)" />

  <PropertyGroup>
    <PackageId Condition=" '$(PackageId)' == '' ">$(AssemblyName)</PackageId>
    <PackageVersion Condition=" '$(PackageVersion)' == '' ">$(AssemblyInformationalVersion)</PackageVersion>
    <PackageVersion Condition=" '$(PackageVersion)' == '' ">$(AssemblyVersion)</PackageVersion>
    <PackWhenReference Condition=" '$(PackWhenReference)' == '' ">true</PackWhenReference>
    <PackageOutputPath Condition=" '$(PackageOutputPath )' == '' ">$(TargetDir)</PackageOutputPath>
    <IncludeContentInPack Condition="'$(IncludeContentInPack)'==''">true</IncludeContentInPack>
    <Description Condition="'$(Description)'==''">Description</Description>
  </PropertyGroup>
  <ItemGroup>
    <PackageFiles Include="@(Content)" Condition="'$(IncludeContentInPack)'=='true'" />
  </ItemGroup>
  
  <!--
    ============================================================
    Pack
    Main entry point for packing packages
    ============================================================
  -->
  <Target Name="Pack" DependsOnTargets="_GetProjectToProjectReferences; _GetPackageFilesFromReferencedProjects; _GetTargetPaths">
    <!-- Call Pack -->
    <PackTask PackItem="$(PackProjectInputFile)"
              PackageFiles="@(_PackageFiles)"
              PackageVersion="$(PackageVersion)"
              PackageId="$(PackageId)"
              Authors="$(Authors)"
              Owners="$(Authors)"
              Description="$(Description)"
              Copyright="$(Copyright)"
              Summary="$(Summary)"
              RequireLicenseAcceptance="$(RequireLicenseAcceptance)"
              LicenseUrl="$(LicenseUrl)"
              ProjectUrl="$(ProjectUrl)"
              IconUrl="$(IconUrl)"
              ReleaseNotes="$(ReleaseNotes)"
              Tags="$(Tags)"
              Properties="$(Properties)"
              Exclude="$(Exclude)"
              OutputPath="$(OutputPath)"
              Configuration="$(Configuration)"
              TargetPath="@(_TargetPath)"
              TargetFrameworks="@(TargetFramework)"
              AssemblyName="$(AssemblyName)"
              ProjectReferences="@(_ProjectReferences)"
              PackageOutputPath="$(PackageOutputPath)"
              IncludeSymbols="$(IncludeSymbols)"
              IsTool="$(IsTool)"/>
  </Target>

  <Target Name="_GetTargetPaths">
    <ItemGroup>
      <_TargetPath Include="$(TargetDir)%(TargetFramework.Identity)\$(TargetFileName)"/>
    </ItemGroup>
  </Target>
  <!--
    ============================================================
    _LoadPackGraphEntryPoints
    Find project entry points and load them into items.
    ============================================================
  -->
  <Target Name="_LoadPackInputItems">
    <!-- Allow overriding items with PackProjectFileInput -->
    <PropertyGroup Condition="'$(PackProjectInputFile)' == ''">
      <PackProjectInputFile>$(PackProjectFileInput)</PackProjectInputFile>
    </PropertyGroup>

    <!-- Project case -->
    <PropertyGroup Condition="$(MSBuildProjectFullPath.EndsWith('.csproj')) == 'true' AND '$(PackProjectInputFile)' == ''">
      <PackProjectInputFile>$(MSBuildProjectFullPath)</PackProjectInputFile>
    </PropertyGroup>
  </Target>

  <!--
    ============================================================
    _GetProjectToProjectReferences
    Entry point for generating the project to project references.
    ============================================================
  -->
  <Target Name="_GetProjectToProjectReferences" DependsOnTargets="_LoadPackInputItems">
    
    <!-- Validate -->
    <Error Text="There are no projects to restore!" Condition="$(PackProjectInputFile) == ''"/>

    <!-- Walk the project references for each project -->
    <MsBuild
        Projects="$(PackProjectInputFile)"
        Targets="_WalkProjectToProjectReferences"
        BuildInParallel="false"
        Properties="
                %(_MSBuildProjectReferenceExistent.SetConfiguration);
                %(_MSBuildProjectReferenceExistent.SetPlatform);
                CustomAfterMicrosoftCommonTargets=$(MSBuildThisFileFullPath);
                PackGraphWriteEntryPoint=true;
                BuildProjectReferences=false;"
        RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_ProjectReferences" />
    </MsBuild>

  </Target>

  <!--
    ============================================================
    _WalkProjectToProjectReferences
    Recursively walk project to project references
    ============================================================
  -->
  <Target Name="_WalkProjectToProjectReferences"
      DependsOnTargets="_SplitProjectReferencesByFileExistence"
      Returns="@(_ProjectReferences)">

    <ItemGroup>
      <!-- Filter out project references that specify ReferenceOutputAssembly=false -->
      <ValidProjectInputForPackGraph Include="@(ProjectReference)"
          Condition=" %(ProjectReference.ReferenceOutputAssembly) == '' OR %(ProjectReference.ReferenceOutputAssembly) == 'true' " />
    </ItemGroup>

    <!-- Project to project entry -->
    <ItemGroup Condition = " '$(PackGraphWriteEntryPoint)' == 'false' ">
      <_ProjectReferences
        Include="PROJECT|$(TargetPath)|$(AssemblyName)|$(MSBuildProjectFullPath)" Condition=" $(PackWhenReference) != 'true' " />
      <_ProjectReferences
        Include="PACKAGE|$(PackageId)|$(PackageVersion)" Condition=" $(PackWhenReference) == 'true' " />
    </ItemGroup>

    <!-- Recurse into referenced projects -->
    <MSBuild
      Projects="@(ValidProjectInputForPackGraph)"
      Targets="_WalkProjectToProjectReferences"
      Properties="
            %(_MSBuildProjectReferenceExistent.SetConfiguration);
            %(_MSBuildProjectReferenceExistent.SetPlatform);
            PackGraphWriteEntryPoint=false;
            BuildProjectReferences=false"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_ProjectReferences" />
    </MSBuild>
  </Target>

  <!--
    ============================================================
    _GetPackageFilesFromReferencedProjects
    Entry point for generating the project to project references.
    ============================================================
  -->
  <Target Name="_GetPackageFilesFromReferencedProjects" DependsOnTargets="_LoadPackInputItems">
    <Message Text="Package File Entry Point : $(PackProjectInputFile)" Importance="High"/>


    <!-- Include PackageFiles and Content of the project being packed -->
    <ItemGroup>
      <_PackageFiles
        Include="@(PackageFiles)" />
      <_PackageFiles
        Include="@(Content)" Condition=" '%(Content.Pack)' == 'true' " />
    </ItemGroup>
    
    <!-- Walk the project references for each project -->
    <MsBuild
        Projects="$(PackProjectInputFile)"
        Targets="_RecursivelyGetPackageFilesFromReferencedProjects"
        BuildInParallel="false"
        Properties="
                %(_MSBuildProjectReferenceExistent.SetConfiguration);
                %(_MSBuildProjectReferenceExistent.SetPlatform);
                CustomAfterMicrosoftCommonTargets=$(MSBuildThisFileFullPath);"
        RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_PackageFiles" />
    </MsBuild>

  </Target>

  <!--
    ============================================================
    _RecursivelyGetPackageFilesFromReferencedProjects
    Recursively walk project to project references to get content files which should be packed
    ============================================================
  -->
  <Target Name="_RecursivelyGetPackageFilesFromReferencedProjects"
      DependsOnTargets="_SplitProjectReferencesByFileExistence"
      Returns="@(_PackageFiles)">

    <Message Text="Currently in project : $(MSBuildProjectFullPath)" Importance="High"/>
    <ItemGroup>
      <!-- Filter out project references that specify ReferenceOutputAssembly=false -->
      <ValidProjectInputForPackGraph Include="@(ProjectReference)"
          Condition=" %(ProjectReference.ReferenceOutputAssembly) == '' OR %(ProjectReference.ReferenceOutputAssembly) == 'true' " />
    </ItemGroup>

    <!-- Project to project entry -->
    <!-- Include PackageFiles and Content of the project being packed -->
    <ItemGroup>
      <_PackageFiles
        Include="@(PackageFiles)" Condition=" '$(PackWhenReference)' != 'true' " />
      <_PackageFiles
        Include="@(Content)" Condition=" %(Content.Pack) != 'false' AND '$(PackWhenReference)' != 'true' " />
    </ItemGroup>

    <!-- Recurse into referenced projects -->
    <MSBuild
      Projects="@(ValidProjectInputForPackGraph)"
      Targets="_RecursivelyGetPackageFilesFromReferencedProjects"
      Properties="
            %(_MSBuildProjectReferenceExistent.SetConfiguration);
            %(_MSBuildProjectReferenceExistent.SetPlatform);"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output
          TaskParameter="TargetOutputs"
          ItemName="_PackageFiles" />
    </MSBuild>
  </Target>
</Project>